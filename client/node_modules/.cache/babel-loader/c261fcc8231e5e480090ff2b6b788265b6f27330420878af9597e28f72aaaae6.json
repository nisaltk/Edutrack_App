{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nisal\\\\Downloads\\\\web\\\\client\\\\src\\\\components\\\\PerformanceChart.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst ChartContainer = styled.div`\n  background: ${props => props.theme.cardBg};\n  border-radius: 12px;\n  padding: 25px;\n  box-shadow: 0 4px 20px ${props => props.theme.shadow};\n  border: 1px solid ${props => props.theme.border};\n  margin-bottom: 30px;\n`;\n_c = ChartContainer;\nconst ChartTitle = styled.h3`\n  color: ${props => props.theme.text};\n  margin-bottom: 20px;\n  font-size: 18px;\n  font-weight: 600;\n  text-align: center;\n`;\n_c2 = ChartTitle;\nconst PerformanceChart = ({\n  subject,\n  performanceData\n}) => {\n  // Generate chart data based on performance metrics\n  const getChartData = () => {\n    if (!performanceData || !performanceData.metrics) {\n      return {\n        labels: ['No Data'],\n        datasets: [{\n          label: 'Performance',\n          data: [0],\n          backgroundColor: 'rgba(100, 100, 100, 0.5)'\n        }]\n      };\n    }\n    const labels = performanceData.metrics.map(metric => metric.title);\n    const data = performanceData.metrics.map(metric => {\n      // Extract numeric value from string (e.g., \"87%\" -> 87, \"+5.2%\" -> 5.2)\n      const numericValue = parseFloat(metric.value.replace(/[+%]/g, ''));\n      return isNaN(numericValue) ? 0 : numericValue;\n    });\n    return {\n      labels,\n      datasets: [{\n        label: 'Performance Score',\n        data,\n        backgroundColor: 'rgba(59, 130, 246, 0.8)',\n        borderColor: 'rgba(59, 130, 246, 1)',\n        borderWidth: 1\n      }]\n    };\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: `Performance Metrics - ${subject.charAt(0).toUpperCase() + subject.slice(1)}`\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        max: 100,\n        ticks: {\n          callback: function (value) {\n            return value + '%';\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChartContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ChartTitle, {\n      children: \"Performance Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: getChartData(),\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_c3 = PerformanceChart;\nexport default PerformanceChart;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ChartContainer\");\n$RefreshReg$(_c2, \"ChartTitle\");\n$RefreshReg$(_c3, \"PerformanceChart\");","map":{"version":3,"names":["React","styled","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","ChartContainer","div","props","theme","cardBg","shadow","border","_c","ChartTitle","h3","text","_c2","PerformanceChart","subject","performanceData","getChartData","metrics","labels","datasets","label","data","backgroundColor","map","metric","title","numericValue","parseFloat","value","replace","isNaN","borderColor","borderWidth","options","responsive","plugins","legend","position","display","charAt","toUpperCase","slice","scales","y","beginAtZero","max","ticks","callback","children","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["C:/Users/Nisal/Downloads/web/client/src/components/PerformanceChart.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst ChartContainer = styled.div`\n  background: ${props => props.theme.cardBg};\n  border-radius: 12px;\n  padding: 25px;\n  box-shadow: 0 4px 20px ${props => props.theme.shadow};\n  border: 1px solid ${props => props.theme.border};\n  margin-bottom: 30px;\n`;\n\nconst ChartTitle = styled.h3`\n  color: ${props => props.theme.text};\n  margin-bottom: 20px;\n  font-size: 18px;\n  font-weight: 600;\n  text-align: center;\n`;\n\nconst PerformanceChart = ({ subject, performanceData }) => {\n  // Generate chart data based on performance metrics\n  const getChartData = () => {\n    if (!performanceData || !performanceData.metrics) {\n      return {\n        labels: ['No Data'],\n        datasets: [\n          {\n            label: 'Performance',\n            data: [0],\n            backgroundColor: 'rgba(100, 100, 100, 0.5)',\n          },\n        ],\n      };\n    }\n\n    const labels = performanceData.metrics.map(metric => metric.title);\n    const data = performanceData.metrics.map(metric => {\n      // Extract numeric value from string (e.g., \"87%\" -> 87, \"+5.2%\" -> 5.2)\n      const numericValue = parseFloat(metric.value.replace(/[+%]/g, ''));\n      return isNaN(numericValue) ? 0 : numericValue;\n    });\n\n    return {\n      labels,\n      datasets: [\n        {\n          label: 'Performance Score',\n          data,\n          backgroundColor: 'rgba(59, 130, 246, 0.8)',\n          borderColor: 'rgba(59, 130, 246, 1)',\n          borderWidth: 1,\n        },\n      ],\n    };\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: `Performance Metrics - ${subject.charAt(0).toUpperCase() + subject.slice(1)}`,\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true,\n        max: 100,\n        ticks: {\n          callback: function(value) {\n            return value + '%';\n          }\n        }\n      },\n    },\n  };\n\n  return (\n    <ChartContainer>\n      <ChartTitle>Performance Overview</ChartTitle>\n      <Bar data={getChartData()} options={options} />\n    </ChartContainer>\n  );\n};\n\nexport default PerformanceChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}